//// COMPUTE THE MINIMUM OF TWO VALUES
// This function takes two arguments and pushes the smaller of
// them onto the stack. To call this function, you should:
//   1. push two values onto the stack; and
//   2. call this function with `call Sys.min 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
// Push to the stack the minimum of two arguments.
//


function Sys.min 2   
push argument 0
push argument 1
lt
if-goto less
push argument 1
return
label less
push argument 0
return



//// COMPUTE THE MAXIMUM OF TWO VALUES
// This function takes two arguments and pushes the larger of
// them onto the stack. To call this function, you should:
//   1. push two values onto the stack; and
//   2. call this function with `call Sys.max 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
// Push to the stack the minimum of two arguments.
//


function Sys.max 2
push argument 0
push argument 1
gt
if-goto great
push argument 1
return
label great
push argument 0
return


//// COMPUTE THE RANGE OF AN ARRAY.
// This function takes two arguments, representing an array of
// integers, and returns the range of the array onto the stack.
// The two arguments are:
//   ARG0 - memory location where the array starts, and
//   ARG1 - number of elements in the array.
// To call this function, you should:
//   1. push the address of the first array elementonto the stack;
//   2. push the number of array elements onto the stack; and
//   2. call this function with `call Sys.range 2`.
// Before returning, the function pushes the result onto the
// stack, so that, from the point of view of the callee, the
// result is at the top of the stack.
//

function Sys.range 2
push argument 0
pop pointer 0      //pointer


push this 0
pop local 0
push this 0
pop local 1    // initialize


push argument 1
push constant 1
sub
pop argument 1   // lenth - 1



push constant 1
push pointer 0
add
pop pointer 0  // pointer + 1



label while  // While LOOP
push argument 1
push constant 0
eq
if-goto END

push this 0
push local 0
call Sys.max 2
pop local 0 //max

push this 0
push local 1
call Sys.min 2
pop local 1   // min

push constant 1
push pointer 0
add
pop pointer 0  // pointer + 1

push argument 1
push constant 1
sub
pop argument 1   // lenth - 1

goto while

label END
push local 0
push local 1
sub
return


// The emulator will start executing from here. You can modify
// the code below while testing and debugging your code, but
// please revert your changes before submitting to Gradescope;
// otherwise, your submission will most likely fail all tests.
//
// A better way to test your code is to use the supplied file
//   Sys.tst
// with the virtual machine emulator. Please do not submit this
// file to Gradescope, as this will cause your submission to be
// rejected.
//
function Sys.init 0
    call Sys.range 2
label WHILE
    goto WHILE
